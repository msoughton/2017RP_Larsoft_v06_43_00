##include "evdservices_dune.fcl"
#include "evd_dune.fcl"

process_name: EVD

services:
{
  message:      @local::evd_message
                @table::dune35t_disp_data
}

# Define the services

#Look at the input files
source:
{
  module_type: RootInput
  fileNames:  [ "single_gen.root" ]
  maxEvents:   -1       # Number of events to create
}

outputs:{}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers: {}

 filters:{}

 analyzers:
 {
  evdisp:{module_type: EVD}
 }
 
 #list the modules for this path, order matters, filters reject all following items
 evd: [ evdisp ] 

 #end_path are things that do not modify art::Event, includes analyzers 
 #and output modules. all items here can be run simultaneously
 end_paths: [evd]  
}

services.DetPedestalService.DetPedestalDUNE.UseDB: true

services.ColorDrawingOptions.ColorOrGrayScale:       0    # use color
services.RawDrawingOptions.TotalTicks:               5200
services.RawDrawingOptions.StartTick:               0

services.RawDrawingOptions.TPC: 1  #TPC 1 is the main drift volume in 35t
services.RawDrawingOptions.RawDataLabel: "SplitterInput:TPC"    #slicer

services.RecoDrawingOptions.DrawClusters:               0
services.RecoDrawingOptions.DrawTracks:                 0
services.RecoDrawingOptions.DrawTrackSpacePoints:       0
services.RecoDrawingOptions.DrawOpFlashes:              0
services.RawDrawingOptions.RawQHigh: 200
services.RawDrawingOptions.RawQLow: -200
services.ColorDrawingOptions.RawQHigh:[ 200 ]
services.ColorDrawingOptions.RawQLow: [ -200 ]


