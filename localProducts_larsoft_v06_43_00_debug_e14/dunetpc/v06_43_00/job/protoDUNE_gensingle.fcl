#include "services_dune.fcl"
#include "singles_dune.fcl"

process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "gensingle_protoDUNE_hist.root" }
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::protodune_simulation_services
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   1000000
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::dunefd_singlep	  
   rns:       { module_type: "RandomNumberSaver" }
 }


 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, generator ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "gensingle_protoDUNE.root" #default file name, can override from command line with -o or --output
   dataTier: "generated"
   compressionLevel: 1
 }
}

#Set generator parameters
#Corresponds to beam window at center of left TPC

physics.producers.generator.PDG: [13] 	 # Particle ID
physics.producers.generator.PDist: 1   # Momentum distribution (0=uniform, 1=gaussian)
physics.producers.generator.P0: [1.0]  	 # Central value of momentum (GeV)
physics.producers.generator.SigmaP: [0.05]   # Width of momentum distribution (5%)

# This block defines starting parameters for protodune_v2_2.gdml geometry
#physics.producers.generator.PosDist: 0	 # Position distribution (0=uniform, 1=gaussian)
#physics.producers.generator.X0: [118.106]	 # Starting position (cm)
#physics.producers.generator.Y0: [395.649]	  	 
#physics.producers.generator.Z0: [-196.113]
#physics.producers.generator.SigmaX: [0.0]
#physics.producers.generator.SigmaY: [0.0]
#physics.producers.generator.SigmaZ: [0.0]

#physics.producers.generator.AngleDist: 0	 # Angle distribution (0=uniform, 1=gaussian)
#physics.producers.generator.Theta0XZ: [-8.189] # Starting angles (degrees)
#physics.producers.generator.Theta0YZ: [-11.229]
#physics.producers.generator.SigmaThetaXZ: [0.]	  	 
#physics.producers.generator.SigmaThetaYZ: [0.]	  	 

# This block defines starting parameters for beam window 2 ( with beam plug) in protodune_v3.gdml geometry
# physics.producers.generator.PosDist: 0   # Position distribution (0=uniform, 1=gaussian)
# physics.producers.generator.X0: [65.343]         # Starting position (cm)
# physics.producers.generator.Y0: [461.06]
# physics.producers.generator.Z0: [-196.11]
# physics.producers.generator.SigmaX: [0.0]
# physics.producers.generator.SigmaY: [0.0]
# physics.producers.generator.SigmaZ: [0.0]
#
# physics.producers.generator.AngleDist: 0         # Angle distribution (0=uniform, 1=gaussian)
# physics.producers.generator.Theta0XZ: [-8.189] # Starting angles (degrees)
# physics.producers.generator.Theta0YZ: [-11.229]
# physics.producers.generator.SigmaThetaXZ: [0.]
# physics.producers.generator.SigmaThetaYZ: [0.]
#

# This block defines starting parameters for beam window 3 ( with beam plug) in protodune_v3.gdml geometry
physics.producers.generator.PosDist: 0   # Position distribution (0=uniform, 1=gaussian)
physics.producers.generator.X0: [8.0757]         # Starting position (cm)
physics.producers.generator.Y0: [461.06]
physics.producers.generator.Z0: [-196.11]
physics.producers.generator.SigmaX: [0.0]
physics.producers.generator.SigmaY: [0.0]
physics.producers.generator.SigmaZ: [0.0]

physics.producers.generator.AngleDist: 0         # Angle distribution (0=uniform, 1=gaussian)
physics.producers.generator.Theta0XZ: [-11.844] # Starting angles (degrees)
physics.producers.generator.Theta0YZ: [-11.107]
physics.producers.generator.SigmaThetaXZ: [0.]
physics.producers.generator.SigmaThetaYZ: [0.]

